# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: release
on:
  push:
    branches:
      - master
      - setup-CI

jobs:
  build-push:
    env:
      REGISTRY_NAME: k8scc01covidacr
      CLUSTER_NAME: k8s-cancentral-02-covid-aks
      CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
      NAMESPACE: monitoring
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
 
    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Container build and push to a Azure Container registry (ACR)
    - name: build and push image
      run: |
          cd app
          docker build -f Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/kfp-secret-scanner:${{ github.sha }} .
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/kfp-secret-scanner:${{ github.sha }}
          cd -
    # Set the target Azure Kubernetes Service (AKS) cluster.
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    # # create the elastic-creds secret
    # - name: create elk secret
    #   run: |
    #       ./create-elk-secret.sh monitoring
    
    # Create imagepullsecret for Azure Container registry (ACR)
    # - uses: azure/k8s-create-secret@v1
    #   with:
    #     container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
    #     container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
    #     container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
    #     secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }}

    # Create imagepullsecret for Azure Container registry (ACR)
    - name: add imagePullSecret
      run: |    
        helm template -n ${{ env.NAMESPACE }} \
        --set image.registry=${{ env.REGISTRY_NAME }}.azurecr.io \
        --set elasticsearch.host=${{ secrets.ELASTICSEARCH_URL }} \
        --set 'image.imagePullSecrets[0].name'=image-pull-secret \
        --set namespace=${{ env.NAMESPACE }} ./chart | kubectl apply -f -

    # # Scan image for vulnerabilities
    # - uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/kfp-secret-scanner:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: false

    # Deploy Helm chart
    - uses: 'statcan/actions/helm@master'
      with:
        release: 'kfp-secret-scanner'
        namespace: 'monitoring'
        chart: './chart'
        token: '${{ github.token }}'
        values: './chart'
